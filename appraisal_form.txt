20%
Weightage
1. Understanding of the requirement--Puneeth S B
1.1) Classification of CR type - Addition, Essential, Non-Essential, etc.
1.2 ) Participation in BRD discussion.


Getting Involved in CR discussion/priority 100%
1.1: Understand CR requirement overall Activities +30%
1.1.1: Analysing system impact +20%
1.1.2: Create System Design on the basis of BRD +30%

1.2: Understanding gaps on the based on BRD +20%


===

20%
Weightage
2. Maintain high standards of code quality and readability-- Puneeth S B
2.1) Check Code coverage for Junit and SonarQube
2.2) Regular code review process for each CR
Maintain Quality for high standards 100%
-2.1.1: Code coverage by jUnit tests +40%
-2.1.2: Code coverage by SonarQube +30%
-2.2: Code review feedback metrics +10 %
-2.2.1: Removal of static code +20%

==

10%
Weightage
3. Ensure the security and compliance of the payment gateway platform--Puneeth S B
3.1) Security training awareness

Maintain Quality for Security and Compliance 100%
-3.1.1: Learning/Awareness secure developments 100%

==

20%
Weightage
4. Improve efficiency and reliability of deployment--Puneeth S B
4.1) Deployment frequency should be properly plan and it should be less.
4.2) Deployment and Rollback Plan should be maintain
4.3) Deployment Rollback Kaizen
CICD for all components and make deployment eazy 100%
-4.1: Deployment frequency 30%
-4.2: Adoption rate of continuous deployment practices 50%
-4.3: Check deployment rollback reason and maintain Kaizen 20%

==

30%
Weightage
5. Ensure understanding domain knowledge and Enhancement--Puneeth S B
5.1) Technical enhancement
5.2) Implement Advanced Feature (R & D )
Maintain Code Quality And Enhabcements 100%
-5.1 :R & D for new Feature in replacement of existing one 50%
-5.2 :Continuous learning new enhancement. 50%

==



Competency

20%
Weightage
Integrity


===


20%
Weightage
Ability to learn & Shows initiative
To what extent did this person contribute to any major initiatives?
To what extent did they raise the standard of quality through work?


==


20%
Weightage
Accuracy in work & Results oriented


==

20%
Weightage
Oral & written Communication
How effectively did this person share knowledge with others?
To what extent did they provide constructive feedback regularly?


==

20%
Weightage
Discipline & Time Management

==

10%
Weightage
Critical Thinking/Problem Solving
How has this person approached challenges?
To what extent did they employ creative ideas in solving problems?

==

10%
Weightage
Teamwork/Collaboration
To what extent was this person considerate of the needs of others?
To what extent did they demonstrate helpfulness towards coworkers?

==


10%
Weightage
Decision-Making


==

10%
Weightage
Diagnostic and Analytical Skills

==

10%
Weightage
Leadership and Navigation
How well did this person handle conflict?
To what extent did they exhibit a strong ability to motivate others?

==













buildscript {
    repositories { jcenter() }
}

plugins {
    id 'jacoco'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'



jacoco {
    toolVersion = "0.8.10" // Specify the JaCoCo version
}

jacocoTestReport {
    dependsOn test // Ensure tests are run before generating the report
    reports {
        xml.required = true // Enable XML report
        html.required = true // Enable HTML report
    }
}

// Configure the test task to finalize the report generation
tasks.test {
    finalizedBy jacocoTestReport // Generate report after tests are run
}




group = 'org.jpos.template'
version = '2.1.9'
//version = '2.1.10'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url 'http://nexus.atomtech.in/repository/ndps-maven-group/' 
    credentials{
    
    username 'nexus-user'
    password 'Nexus@123'
    }
    
   }
    gradlePluginPortal()
}
//'org.jpos:jpos:2.1.6-SNAPSHOT'
dependencies {
    compile ('org.jpos:jpos:2.+') {
     //   exclude(module: 'junit')
     //   exclude(module: 'hamcrest-core')
         
    }
    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' // Use a specific version
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2' // Use a specific version
    
   // testCompile 'junit:junit:4.8.2'
     
    
    compile group:'org.jpos.ee', name:'jposee-dbsupport', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-db-mysql', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-txn', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-http-client', version:'2.2.8'
    
    //compile group:'org.jpos.ee', name:'jposee-freemarker-decorator', version:'2.2.+'
     compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
     compile group: 'org.json', name: 'json', version: '20200518'
    
     /*testCompile 'org.junit.jupiter:junit-jupiter-api:5+'    //done
     testCompile 'org.junit.jupiter:junit-jupiter-engine:5+' //done 5.6.2
     */
     testCompile 'org.meanbean:meanbean:2.+'
     testImplementation group: 'org.meanbean', name: 'meanbean', version: '2.0.3'
    
     testCompile 'org.mockito:mockito-core:3.+'
     testCompile 'org.mockito:mockito-inline:3.+'
     testCompile 'org.mockito:mockito-junit-jupiter:3.+'
     



    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.20.Final'
	implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
	implementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
	implementation 'com.atom.ots-java:ATOMAESEncryption:1.0'

}

// Add the test configuration here
tasks.withType(Test) {
    useJUnitPlatform() // This is necessary for JUnit 5
}

apply from: 'jpos-app.gradle'












package in.atomtech.mw.channel;

import java.io.IOException;
import java.net.ServerSocket;

import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOPackager;
import org.jpos.iso.ISOUtil;
import org.jpos.iso.ISOFilter.VetoException;
import org.jpos.iso.channel.NACChannel;
import org.jpos.util.LogEvent;
import org.jpos.util.Logger;

public class HitachiChannel extends NACChannel {

	public HitachiChannel() {
		super();
	}

	public HitachiChannel(ISOPackager p, byte[] TPDU, ServerSocket serverSocket) throws IOException {
		super(p, TPDU, serverSocket);
	}

	public HitachiChannel(ISOPackager p, byte[] TPDU) throws IOException {
		super(p, TPDU);
	}

	public HitachiChannel(String host, int port, ISOPackager p, byte[] TPDU) {
		super(host, port, p, TPDU);
	}

	
	public void send(ISOMsg m) throws IOException, ISOException {
		
		LogEvent evt = new LogEvent(this, "send");
		
		try {
			
			if (!isConnected())
				throw new IOException("unconnected ISOChannel");
			
			m.setDirection(ISOMsg.OUTGOING);
			ISOPackager p = getDynamicPackager(m);
			m.setPackager(p);
			m = applyOutgoingFilters(m, evt);
			evt.addMessage(m);
			m.setDirection(ISOMsg.OUTGOING); // filter may have dropped this info
			m.setPackager(p); // and could have dropped packager as well
			byte[] b = pack(m);
			
			System.out.println(ISOUtil.hexdump(b));
			
			synchronized (serverOutLock) {
				sendMessageLength(b.length + getHeaderLength(m));
				sendMessageHeader(m, b.length);
				sendMessage(b, 0, b.length);
				sendMessageTrailer(m, b);
				serverOut.flush();
			}
			
			cnt[TX]++;
			setChanged();
			notifyObservers(m);
			
		} catch (VetoException e) {
			// if a filter vets the message it was not added to the event
			evt.addMessage(m);
			evt.addMessage(e);
			throw e;
		} catch (ISOException e) {
			evt.addMessage(e);
			throw e;
		} catch (IOException e) {
			evt.addMessage(e);
			throw e;
		} catch (Exception e) {
			evt.addMessage(e);
			throw new IOException("unexpected exception", e);
		} finally {
			Logger.log(evt);
		}
	}
}




===


pipeline {
    agent any
 
    tools {
        gradle 'Gradle6'  // Adjust the Gradle version as needed
        jdk 'jdk8'         // Adjust the JDK version as needed
    }
 
    environment {
        // Explicitly set the JAVA_HOME and PATH for the selected JDK in the environment block
        JAVA_HOME = tool name: 'jdk8', type: 'JDK'  // Ensure 'JDK 11' is defined in Global Tool Configuration
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }
 
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev_junit', credentialsId: 'Gitlab-Cred', url: 'https://gitlab.atomtech.in/atommw/txncore/middleware.git'
            }
        }
        stage('Set Gradle Wrapper Permissions') {
            steps {
                // Set execute permissions for the gradle wrapper
                sh 'chmod +x ./gradlew'
            }
        }
        stage('Build') {
            steps {
                // Clean and build the project using Gradle
                sh './gradlew clean installApp'
            }
        }
        stage('Test') {
            steps {
                // Run the tests using Gradle
                sh './gradlew test'
            }
        }
        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool "SonarQube-Scanner" // Ensure SonarQube scanner is set in Global Tool Configuration
            }
            steps {
                withSonarQubeEnv("SonarQube-Container") {
                    // Run SonarQube analysis
                    sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=txncore-middleware-dev \
                    -Dsonar.projectName=txncore-middleware-dev \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sourceEncoding=UTF-8 \
                    -Dsonar.language=java \
                    -Dsonar.java.binaries=build/classes/java/main \
                    -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                    -Dsonar.test.exclusions=**/*Test.java
                    """
                }
            }
        }
    }
 
    post {
        always {
            // Archive the build artifacts
            archiveArtifacts artifacts: 'build/libs/*.jar', allowEmptyArchive: true
            // Publish test results
            junit '**/build/test-results/test/*.xml'  // Adjust path based on your project structure
        }
    }
}



===


buildscript {
    repositories { jcenter() }
}

plugins {
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'


jacoco {
    toolVersion '0.8.7'
}

// Provide more descriptive test failure output
/*test {
    testLogging {
        exceptionFormat = 'full'
        // showExceptions = true
        // showCauses = true
        // showStackTraces = true
        // showStandardStreams = true
    }
    maxHeapSize = "6144m"
//    jacoco {
//        includes = ["in.atomtech.mw.*"]
//    }
}*/

/*
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
*/

//check.dependsOn jacocoTestReport

// Configure the test task to finalize the report generation
/*tasks.test {
    ignoreFailures = true
    finalizedBy jacocoTestReport // Generate report after tests are run
}*/

group = 'org.jpos.template'
version = '2.1.9'
//version = '2.1.10'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url 'http://nexus.atomtech.in/repository/ndps-maven-group/'
    credentials{

    username 'nexus-user'
    password 'Nexus@123'
    }

   }
    maven { url "https://jitpack.io" }
    gradlePluginPortal()
}
//'org.jpos:jpos:2.1.6-SNAPSHOT'
dependencies {
    compile ('org.jpos:jpos:2.+') {
     //   exclude(module: 'junit')
     //   exclude(module: 'hamcrest-core')

    }
//    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"

    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"

    compile group:'org.sonarsource.scanner.maven', name:'sonar-maven-plugin', version:'3.9.0.2155'
//    compile group:'org.jacoco', name:'jacoco-maven-plugin', version:'0.8.7'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' // Use a specific version
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2' // Use a specific version



    compile group:'org.jpos.ee', name:'jposee-dbsupport', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-db-mysql', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-txn', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-http-client', version:'2.2.8'

    //compile group:'org.jpos.ee', name:'jposee-freemarker-decorator', version:'2.2.+'
     compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
     compile group: 'org.json', name: 'json', version: '20200518'

     testCompile 'org.meanbean:meanbean:2.+'
     testImplementation group: 'org.meanbean', name: 'meanbean', version: '2.0.3'

    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'
    testImplementation 'org.mockito:mockito-inline:3.11.2'

    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.20.Final'
	implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
	implementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
	implementation 'com.atom.ots-java:ATOMAESEncryption:1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

}

sonarqube {
    properties {
//        property "sonar.projectKey", "APOS148"
//        property "sonar.projectName", "APOS148"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
//        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property 'sonar.coverage.exclusions', "**/*Test.java, **/*Tests.java, **/*TestCase.java, **/*AsciiLengthPackagerTest.java"
//        property "sonar.exclusions", "**/test/**, **/*Test.java, **/*Tests.java, **/*TestCase.java, **/repository/**"
        property "sonar.test.exclusions", "**/*Test.java, **/*Tests.java, **/*TestCase.java"
    }
}


// Add the test configuration here
tasks.withType(Test) {
    useJUnitPlatform() // This is necessary for JUnit 5
    finalizedBy jacocoTestReport

    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }
}

apply from: 'jpos-app.gradle'





