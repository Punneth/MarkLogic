20%
Weightage
1. Understanding of the requirement--Puneeth S B
1.1) Classification of CR type - Addition, Essential, Non-Essential, etc.
1.2 ) Participation in BRD discussion.


Getting Involved in CR discussion/priority 100%
1.1: Understand CR requirement overall Activities +30%
1.1.1: Analysing system impact +20%
1.1.2: Create System Design on the basis of BRD +30%

1.2: Understanding gaps on the based on BRD +20%


===

20%
Weightage
2. Maintain high standards of code quality and readability-- Puneeth S B
2.1) Check Code coverage for Junit and SonarQube
2.2) Regular code review process for each CR
Maintain Quality for high standards 100%
-2.1.1: Code coverage by jUnit tests +40%
-2.1.2: Code coverage by SonarQube +30%
-2.2: Code review feedback metrics +10 %
-2.2.1: Removal of static code +20%

==

10%
Weightage
3. Ensure the security and compliance of the payment gateway platform--Puneeth S B
3.1) Security training awareness

Maintain Quality for Security and Compliance 100%
-3.1.1: Learning/Awareness secure developments 100%

==

20%
Weightage
4. Improve efficiency and reliability of deployment--Puneeth S B
4.1) Deployment frequency should be properly plan and it should be less.
4.2) Deployment and Rollback Plan should be maintain
4.3) Deployment Rollback Kaizen
CICD for all components and make deployment eazy 100%
-4.1: Deployment frequency 30%
-4.2: Adoption rate of continuous deployment practices 50%
-4.3: Check deployment rollback reason and maintain Kaizen 20%

==

30%
Weightage
5. Ensure understanding domain knowledge and Enhancement--Puneeth S B
5.1) Technical enhancement
5.2) Implement Advanced Feature (R & D )
Maintain Code Quality And Enhabcements 100%
-5.1 :R & D for new Feature in replacement of existing one 50%
-5.2 :Continuous learning new enhancement. 50%

==



Competency

20%
Weightage
Integrity


===


20%
Weightage
Ability to learn & Shows initiative
To what extent did this person contribute to any major initiatives?
To what extent did they raise the standard of quality through work?


==


20%
Weightage
Accuracy in work & Results oriented


==

20%
Weightage
Oral & written Communication
How effectively did this person share knowledge with others?
To what extent did they provide constructive feedback regularly?


==

20%
Weightage
Discipline & Time Management

==

10%
Weightage
Critical Thinking/Problem Solving
How has this person approached challenges?
To what extent did they employ creative ideas in solving problems?

==

10%
Weightage
Teamwork/Collaboration
To what extent was this person considerate of the needs of others?
To what extent did they demonstrate helpfulness towards coworkers?

==


10%
Weightage
Decision-Making


==

10%
Weightage
Diagnostic and Analytical Skills

==

10%
Weightage
Leadership and Navigation
How well did this person handle conflict?
To what extent did they exhibit a strong ability to motivate others?

==













buildscript {
    repositories { jcenter() }
}

plugins {
    id 'jacoco'
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'



jacoco {
    toolVersion = "0.8.10" // Specify the JaCoCo version
}

jacocoTestReport {
    dependsOn test // Ensure tests are run before generating the report
    reports {
        xml.required = true // Enable XML report
        html.required = true // Enable HTML report
    }
}

// Configure the test task to finalize the report generation
tasks.test {
    finalizedBy jacocoTestReport // Generate report after tests are run
}




group = 'org.jpos.template'
version = '2.1.9'
//version = '2.1.10'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url 'http://nexus.atomtech.in/repository/ndps-maven-group/' 
    credentials{
    
    username 'nexus-user'
    password 'Nexus@123'
    }
    
   }
    gradlePluginPortal()
}
//'org.jpos:jpos:2.1.6-SNAPSHOT'
dependencies {
    compile ('org.jpos:jpos:2.+') {
     //   exclude(module: 'junit')
     //   exclude(module: 'hamcrest-core')
         
    }
    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' // Use a specific version
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2' // Use a specific version
    
   // testCompile 'junit:junit:4.8.2'
     
    
    compile group:'org.jpos.ee', name:'jposee-dbsupport', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-db-mysql', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-txn', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-http-client', version:'2.2.8'
    
    //compile group:'org.jpos.ee', name:'jposee-freemarker-decorator', version:'2.2.+'
     compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
     compile group: 'org.json', name: 'json', version: '20200518'
    
     /*testCompile 'org.junit.jupiter:junit-jupiter-api:5+'    //done
     testCompile 'org.junit.jupiter:junit-jupiter-engine:5+' //done 5.6.2
     */
     testCompile 'org.meanbean:meanbean:2.+'
     testImplementation group: 'org.meanbean', name: 'meanbean', version: '2.0.3'
    
     testCompile 'org.mockito:mockito-core:3.+'
     testCompile 'org.mockito:mockito-inline:3.+'
     testCompile 'org.mockito:mockito-junit-jupiter:3.+'
     



    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.20.Final'
	implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
	implementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
	implementation 'com.atom.ots-java:ATOMAESEncryption:1.0'

}

// Add the test configuration here
tasks.withType(Test) {
    useJUnitPlatform() // This is necessary for JUnit 5
}

apply from: 'jpos-app.gradle'












package in.atomtech.mw.channel;

import java.io.IOException;
import java.net.ServerSocket;

import org.jpos.iso.ISOException;
import org.jpos.iso.ISOMsg;
import org.jpos.iso.ISOPackager;
import org.jpos.iso.ISOUtil;
import org.jpos.iso.ISOFilter.VetoException;
import org.jpos.iso.channel.NACChannel;
import org.jpos.util.LogEvent;
import org.jpos.util.Logger;

public class HitachiChannel extends NACChannel {

	public HitachiChannel() {
		super();
	}

	public HitachiChannel(ISOPackager p, byte[] TPDU, ServerSocket serverSocket) throws IOException {
		super(p, TPDU, serverSocket);
	}

	public HitachiChannel(ISOPackager p, byte[] TPDU) throws IOException {
		super(p, TPDU);
	}

	public HitachiChannel(String host, int port, ISOPackager p, byte[] TPDU) {
		super(host, port, p, TPDU);
	}

	
	public void send(ISOMsg m) throws IOException, ISOException {
		
		LogEvent evt = new LogEvent(this, "send");
		
		try {
			
			if (!isConnected())
				throw new IOException("unconnected ISOChannel");
			
			m.setDirection(ISOMsg.OUTGOING);
			ISOPackager p = getDynamicPackager(m);
			m.setPackager(p);
			m = applyOutgoingFilters(m, evt);
			evt.addMessage(m);
			m.setDirection(ISOMsg.OUTGOING); // filter may have dropped this info
			m.setPackager(p); // and could have dropped packager as well
			byte[] b = pack(m);
			
			System.out.println(ISOUtil.hexdump(b));
			
			synchronized (serverOutLock) {
				sendMessageLength(b.length + getHeaderLength(m));
				sendMessageHeader(m, b.length);
				sendMessage(b, 0, b.length);
				sendMessageTrailer(m, b);
				serverOut.flush();
			}
			
			cnt[TX]++;
			setChanged();
			notifyObservers(m);
			
		} catch (VetoException e) {
			// if a filter vets the message it was not added to the event
			evt.addMessage(m);
			evt.addMessage(e);
			throw e;
		} catch (ISOException e) {
			evt.addMessage(e);
			throw e;
		} catch (IOException e) {
			evt.addMessage(e);
			throw e;
		} catch (Exception e) {
			evt.addMessage(e);
			throw new IOException("unexpected exception", e);
		} finally {
			Logger.log(evt);
		}
	}
}




===


pipeline {
    agent any
 
    tools {
        gradle 'Gradle6'  // Adjust the Gradle version as needed
        jdk 'jdk8'         // Adjust the JDK version as needed
    }
 
    environment {
        // Explicitly set the JAVA_HOME and PATH for the selected JDK in the environment block
        JAVA_HOME = tool name: 'jdk8', type: 'JDK'  // Ensure 'JDK 11' is defined in Global Tool Configuration
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }
 
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev_junit', credentialsId: 'Gitlab-Cred', url: 'https://gitlab.atomtech.in/atommw/txncore/middleware.git'
            }
        }
        stage('Set Gradle Wrapper Permissions') {
            steps {
                // Set execute permissions for the gradle wrapper
                sh 'chmod +x ./gradlew'
            }
        }
        stage('Build') {
            steps {
                // Clean and build the project using Gradle
                sh './gradlew clean installApp'
            }
        }
        stage('Test') {
            steps {
                // Run the tests using Gradle
                sh './gradlew test'
            }
        }
        stage('SonarQube Analysis') {
            environment {
                scannerHome = tool "SonarQube-Scanner" // Ensure SonarQube scanner is set in Global Tool Configuration
            }
            steps {
                withSonarQubeEnv("SonarQube-Container") {
                    // Run SonarQube analysis
                    sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=txncore-middleware-dev \
                    -Dsonar.projectName=txncore-middleware-dev \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sourceEncoding=UTF-8 \
                    -Dsonar.language=java \
                    -Dsonar.java.binaries=build/classes/java/main \
                    -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                    -Dsonar.test.exclusions=**/*Test.java
                    """
                }
            }
        }
    }
 
    post {
        always {
            // Archive the build artifacts
            archiveArtifacts artifacts: 'build/libs/*.jar', allowEmptyArchive: true
            // Publish test results
            junit '**/build/test-results/test/*.xml'  // Adjust path based on your project structure
        }
    }
}



===


buildscript {
    repositories { jcenter() }
}

plugins {
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'


jacoco {
    toolVersion '0.8.7'
}

// Provide more descriptive test failure output
/*test {
    testLogging {
        exceptionFormat = 'full'
        // showExceptions = true
        // showCauses = true
        // showStackTraces = true
        // showStandardStreams = true
    }
    maxHeapSize = "6144m"
//    jacoco {
//        includes = ["in.atomtech.mw.*"]
//    }
}*/

/*
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
*/

//check.dependsOn jacocoTestReport

// Configure the test task to finalize the report generation
/*tasks.test {
    ignoreFailures = true
    finalizedBy jacocoTestReport // Generate report after tests are run
}*/

group = 'org.jpos.template'
version = '2.1.9'
//version = '2.1.10'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
    maven { url 'http://nexus.atomtech.in/repository/ndps-maven-group/'
    credentials{

    username 'nexus-user'
    password 'Nexus@123'
    }

   }
    maven { url "https://jitpack.io" }
    gradlePluginPortal()
}
//'org.jpos:jpos:2.1.6-SNAPSHOT'
dependencies {
    compile ('org.jpos:jpos:2.+') {
     //   exclude(module: 'junit')
     //   exclude(module: 'hamcrest-core')

    }
//    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"

    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"

    compile group:'org.sonarsource.scanner.maven', name:'sonar-maven-plugin', version:'3.9.0.2155'
//    compile group:'org.jacoco', name:'jacoco-maven-plugin', version:'0.8.7'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2' // Use a specific version
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2' // Use a specific version



    compile group:'org.jpos.ee', name:'jposee-dbsupport', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-db-mysql', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-txn', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-http-client', version:'2.2.8'

    //compile group:'org.jpos.ee', name:'jposee-freemarker-decorator', version:'2.2.+'
     compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
     compile group: 'org.json', name: 'json', version: '20200518'

     testCompile 'org.meanbean:meanbean:2.+'
     testImplementation group: 'org.meanbean', name: 'meanbean', version: '2.0.3'

    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'
    testImplementation 'org.mockito:mockito-inline:3.11.2'

    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.20.Final'
	implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
	implementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
	implementation 'com.atom.ots-java:ATOMAESEncryption:1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

}

sonarqube {
    properties {
//        property "sonar.projectKey", "APOS148"
//        property "sonar.projectName", "APOS148"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
//        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes"
        property 'sonar.coverage.exclusions', "**/*Test.java, **/*Tests.java, **/*TestCase.java, **/*AsciiLengthPackagerTest.java"
//        property "sonar.exclusions", "**/test/**, **/*Test.java, **/*Tests.java, **/*TestCase.java, **/repository/**"
        property "sonar.test.exclusions", "**/*Test.java, **/*Tests.java, **/*TestCase.java"
    }
}


// Add the test configuration here
tasks.withType(Test) {
    useJUnitPlatform() // This is necessary for JUnit 5
    finalizedBy jacocoTestReport

    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }
}

apply from: 'jpos-app.gradle'


-----

plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'eclipse'
    id 'org.sonarqube' version '2.8'
}

group = 'org.jpos.template'
version = '2.1.9'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://nexus.atomtech.in/repository/ndps-maven-group/'
        credentials {
            username 'nexus-user'
            password 'Nexus@123'
        }
    }
    maven { url "https://jitpack.io" }
    gradlePluginPortal()
}

dependencies {
    implementation 'org.jpos:jpos:2.+'
    implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
    implementation 'org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    compileOnly 'org.meanbean:meanbean:2.0.3'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'
    testImplementation 'org.mockito:mockito-inline:3.11.2'

    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.0.20.Final'
    implementation 'javax.el:javax.el-api:3.0.0'
    implementation 'org.glassfish.web:javax.el:2.2.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
}

jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    useJUnitPlatform()
    finalizedBy jacocoTestReport

    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
        property "sonar.java.binaries", "build/classes"
        property 'sonar.coverage.exclusions', "**/*Test.java, **/*Tests.java, **/*TestCase.java, **/*AsciiLengthPackagerTest.java"
        property "sonar.test.exclusions", "**/*Test.java, **/*Tests.java, **/*TestCase.java"
    }
}

// if needed
apply from: 'jpos-app.gradle'

++++++

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

jacoco {
    toolVersion = '0.8.7'
}

group = 'org.jpos.template'
version = '2.1.9'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://nexus.atomtech.in/repository/ndps-maven-group/'
        credentials {
            username 'nexus-user'
            password 'Nexus@123'
        }
    }
    maven { url "https://jitpack.io" }
    gradlePluginPortal()
}

dependencies {
    compile ('org.jpos:jpos:2.+')
    implementation "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
    compile group:'org.sonarsource.scanner.maven', name:'sonar-maven-plugin', version:'3.9.0.2155'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    compile group:'org.jpos.ee', name:'jposee-dbsupport', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-db-mysql', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-txn', version:'2.2.8'
    compile group:'org.jpos.ee', name:'jposee-http-client', version:'2.2.8'
    compile group: 'org.jdom', name: 'jdom2', version: '2.0.6.1'
    compile group: 'org.json', name: 'json', version: '20200518'
    testCompile 'org.meanbean:meanbean:2.+'
    testImplementation group: 'org.meanbean', name: 'meanbean', version: '2.0.3'
    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'
    testImplementation 'org.mockito:mockito-inline:3.11.2'
    implementation 'com.atom.ots-java:OTSMerchantJar:3.0.5@jar'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.0.20.Final'
    implementation group: 'javax.el', name: 'javax.el-api', version: '3.0.0'
    implementation group: 'org.glassfish.web', name: 'javax.el', version: '2.2.6'
    implementation 'com.atom.ots-java:ATOMAESEncryption:1.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.language", "java"
        property "sonar.sources", "src/main/java"
        property "sonar.java.binaries", "build/classes"
        property 'sonar.coverage.exclusions', "**/*Test.java, **/*Tests.java, **/*TestCase.java, **/*AsciiLengthPackagerTest.java"
        property "sonar.test.exclusions", "**/*Test.java, **/*Tests.java, **/*TestCase.java"
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.10
            }
        }
    }
}

apply from: 'jpos-app.gradle'



()()()

C:\Users\PuneethSB\workspace\middleware>gradle clean test jacocoTestReport

> Task :compileJava
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

> Task :compileTestJava
Note: C:\Users\PuneethSB\workspace\middleware\src\test\java\in\atomtech\mw\transaction\titan\PrepareTitanRequestTest.java uses or overrides a deprecated
 API.
Note: Recompile with -Xlint:deprecation for details.
Note: C:\Users\PuneethSB\workspace\middleware\src\test\java\in\atomtech\mw\packager\BitmapMessageTest.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

> Task :test

BatchClosureQueryResultTest > test1() PASSED

HitachiChannelTest > testSend() PASSED

HitachiChannelTest > testConstructor1() PASSED

HitachiChannelTest > testConstructor2() PASSED

HitachiChannelTest > testConstructor3() PASSED

HitachiChannelTest > test() PASSED

HitachiChannelTest > test1() PASSED

HitachiChannelTest > testConstructor() PASSED

AcquirerDaoTest > equals11Test() PASSED

AcquirerDaoTest > equals12Test() PASSED

AcquirerDaoTest > equals13Test() PASSED

AcquirerDaoTest > equals14Test() PASSED

AcquirerDaoTest > equals15Test() PASSED

AcquirerDaoTest > equals17Test() PASSED

AcquirerDaoTest > equals20Test() PASSED

AcquirerDaoTest > equals21Test() PASSED

AcquirerDaoTest > equals22Test() PASSED

AcquirerDaoTest > equals23Test() PASSED

AcquirerDaoTest > equals33Test() PASSED

AcquirerDaoTest > equals1211Test() PASSED

AcquirerDaoTest > equalsbankTest() PASSED

AcquirerDaoTest > equalsNullTest() PASSED

AcquirerDaoTest > TransTest() PASSED

AcquirerDaoTest > acqTest() PASSED

AcquirerDaoTest > equalsTestObj1() PASSED

AcquirerDaoTest > equalsTest06() PASSED

AcquirerDaoTest > equalsTest07() PASSED

AcquirerDaoTest > equals1Test() PASSED

AcquirerDaoTest > equalsTest1() PASSED

AcquirerDaoTest > equalsTest2() PASSED

AcquirerDaoTest > equalsTestObj12() PASSED

AcquirerDaoTest > equalsTestObj13() PASSED

AcquirerDaoTest > equalsTestObj14() PASSED

AcquirerDaoTest > equalsbankTest121() PASSED

AcquirerDaoTest > equalsbankTest131() PASSED

AcquirerDaoTest > hascodeTest1() PASSED

AcquirerDaoTest > hascodD99() PASSED

AcquirerDaoTest > hascode32() PASSED

AcquirerDaoTest > hascode33() PASSED

AcquirerDaoTest > hascode99() PASSED

AcquirerDaoTest > equalsTest() PASSED

AcquirerDaoTest > equalsbankTest1() PASSED

AcquirerDaoTest > hashCodeTest() PASSED

AcquirerDaoTest > daoTest() PASSED

AcquirerDaoTest > equalsTestObj() PASSED

AcquirerDaoTest > equalsbankTest12() PASSED

AcquirerDaoTest > equalsbankTest13() PASSED

DailyTaskAdaptorTest > testStartService() PASSED

DailyTaskAdaptorTest > testInit() PASSED

EFSMainDispatcherTest > processTest() PASSED

EFSMainDispatcherTest > setConfigurationTest() PASSED

EFSMainDispatcherTest > sendResponseToSourceTest() PASSED

EFSUnhandledRequestListenerRupayTest > testProcess() PASSED

EFSUnhandledRequestListenerRupayTest > handleNetworkMessagesTest() PASSED

EFSUnhandledRequestListenerRupayTest > processTest() PASSED

EFSUnhandledRequestListenerRupayTest > setConfigurationTest() PASSED

EFSUnhandledRequestListenerRupayTest > handleNetworkMessagesTest1() PASSED

DailyTaskAdaptorTest > testInitServiceThrowsNullPointerException() PASSED

DailyTaskAdaptorTest > testRun() PASSED

DailyTaskAdaptorTest > testStartService() PASSED

DailyTaskAdaptorTest > testStopService() PASSED

DailyTaskAdaptorTest > testInitServiceThrowsNullPointerException1() PASSED

DailyTaskAdaptorTest > testRunThrowsNullPointerException() PASSED

DailyTaskAdaptorTest > testGetWhenThrowsNullPointerException() PASSED

DailyTaskAdaptorTest > testWaitUntilStartTimeThrowsNullPointerException() PASSED

DailyTaskAdaptorTest > testStopService1() PASSED

DailyTaskAdaptorTest > testConstructor() PASSED

AsciiBitmapPackagerTest > unpackTest() PASSED

AsciiBitmapPackagerTest > unpacktest1() PASSED

AsciiBitmapPackagerTest > unpacktest2() PASSED

AsciiDataPackagerTest > unpackTest() PASSED

AsciiDataPackagerTest > AsciiDataPackagerTest1() PASSED

AsciiDataPackagerTest > describeTest() PASSED

AsciiLengthPackagerTest > unpackTest() PASSED

AsciiLengthPackagerTest > lengthPackagerTest() PASSED

AsciiLengthPackagerTest > packTest() PASSED

BCDDataPackagerTest > unpackTest() PASSED

BCDDataPackagerTest > ConTest() PASSED

BCDDataPackagerTest > unpackTest1() PASSED

BCDDataPackagerTest > unpackTest2() PASSED

BCDLengthPackagerTest > unpackTest() PASSED

BCDLengthPackagerTest > Consttest() PASSED

BCDLengthPackagerTest > unpack1Test() PASSED

BinaryDataPackagerTest > NOPDataPackagerTest() PASSED

BinaryDataPackagerTest > test() PASSED

BinaryDataPackagerTest > ConsttTest() PASSED

BitmapMessageTest > unpackTest() PASSED

BitmapMessageTest > setMTItest() PASSED

BitmapMessageTest > getTest() PASSED

BitmapMessageTest > get() PASSED

BitmapMessageTest > fieldCustTest() PASSED

BitmapMessageTest > packTest() PASSED

BitmapMessageTest > unpackTest11() PASSED

BitmapMessageTest > unpackTest12() PASSED

BitmapMessageTest > packTest1() PASSED

BitmapMessageTest > unpackTest1() PASSED

BitmapMessageTest > describeTest() PASSED

BitmapPackagerTest > Bitmaptest() PASSED

BitmapPackagerTest > unpacTest() PASSED

EbcdicDataPackagerTest > unpackTest() PASSED

EbcdicDataPackagerTest > testTest() PASSED

EbcdicDataPackagerTest > packTest() PASSED

EbcdicLengthPackagerTest > unpacktest() PASSED

EbcdicLengthPackagerTest > packTestEx() PASSED

EbcdicLengthPackagerTest > packTest() PASSED

GenericTLVDataPackagerTest > GenericTest() PASSED

AtomEncryptionTest > testEncryptFailureCase() PASSED

AtomEncryptionTest > testMain() PASSED

AtomEncryptionTest > testDecrypt() PASSED

AtomEncryptionTest > testDecryptFailCase() PASSED

AtomSignatureTest > testGenerateSignature() PASSED

AtomSignatureTest > testGenerateSignatureForFailureCase() PASSED

EFSLunaEFTCoreTest > getKVCOfTMKTest() PASSED

EFSLunaEFTCoreTest > generateTPKTest() PASSED

EFSLunaEFTCoreTest > decryptDataTest() PASSED

EFSLunaEFTCoreTest > getKEKTest() PASSED

EFSLunaEFTCoreTest > importDPKTest() PASSED

EFSLunaEFTCoreTest > createStatusRequestTest() PASSED

EFSLunaEFTCoreTest > verifyMACTest() PASSED

EFSLunaEFTCoreTest > importPublicKeyIntoHSMTest() PASSED

EFSLunaEFTCoreTest > encryptDataTest() PASSED

EFSLunaEFTCoreTest > encryptTMKUnderPublicKeyTest() PASSED

EFSLunaEFTCoreTest > generateMACTest() PASSED

EFSLunaEFTCoreTest > getBitTest() PASSED

EFSLunaEFTCoreTest > getLengthBytes() PASSED

EFSLunaEFTCoreTest > translatePINTest() PASSED

EFSLunaEFTCoreTest > importZPKTest() PASSED

EFSLunaEFTCoreTest > generateRandomTMKFromHSMTest() PASSED

CheckTransactionAllowedToTerminalTest > testPrepareForNotAllowedTransaction() PASSED

CheckTransactionAllowedToTerminalTest > testPrepareForAllTransactions() PASSED

EFSBalanceEnquiryTest > testPrepare_ValidOriginAndMissingField35_Aborted1() PASSED

EFSBalanceEnquiryTest > testPrepare_ValidOriginAndMissingField35_Aborted2() PASSED

EFSBalanceEnquiryTest > testPrepare_ValidOriginAndMissingField35_Aborted3() PASSED

EFSBalanceEnquiryTest > testPrepare_ValidOriginAndMissingField35_Aborted4() PASSED

EFSBalanceEnquiryTest > testPrepare_ValidOriginAndMissingField35_Aborted() PASSED

EFSBalanceEnquiryTest > testPrepare() PASSED

EFSBuildCardTest > testPrepare() PASSED

EFSBuildCardTest > testPrepareException() PASSED

EFSCashAtPOSTest > testPrepare() PASSED

EFSCheckDuplicateTransactionTest > testPrepare() PASSED

EFSCheckDuplicateTransactionTest > testPrepareForTransactionIsEmpty() PASSED

EFSCheckFieldsTest > testOptionalPCodeNotPresent() PASSED

EFSCheckFieldsTest > testInvalidTimestamp() PASSED

EFSCheckFieldsTest > testInvalidCard() PASSED

EFSCheckFieldsTest > testPDC() PASSED

EFSCheckFieldsTest > testAmounts() PASSED

EFSCheckFieldsTest > testValidTimestamps() PASSED

EFSCheckFieldsTest > testGenericFieldsExtraPresent() PASSED

EFSCheckFieldsTest > testNoExtraFields() PASSED

EFSCheckFieldsTest > testCaptureDate() PASSED

EFSCheckFieldsTest > testValidCard() PASSED

EFSCheckFieldsTest > testInvalidTransaction() PASSED

EFSCheckFieldsTest > testMidAndTidWithSpaces() PASSED

EFSCheckFieldsTest > testGenericFieldsOptionalNotPresent() PASSED

EFSCheckFieldsTest > testMandatoryPCodeNotPresent() PASSED

EFSCheckFieldsTest > testInvalidPCode() PASSED

EFSCheckFieldsTest > testGenericFields() PASSED

EFSCheckFieldsTest > testOriginalDataElements() PASSED

EFSCheckFieldsTest > testInvalidMidAndTid() PASSED

EFSCheckNetworkFieldsTest > validateDataElementTest() PASSED

EFSCheckNetworkFieldsTest > setConfigurationTest() PASSED

EFSCheckTerminalLimitsTest > testProcessForContact() PASSED

EFSCheckTerminalLimitsTest > testFailScenarios() PASSED

EFSCheckTerminalLimitsTest > testProcessForContactLess() PASSED

EFSCheckTerminalTest > testPrepareWhenMerchantIsNotActive() PASSED

EFSCheckTerminalTest > testPrepareWithoutTerminalId() PASSED

EFSCheckTerminalTest > testPrepareWhenTerminalDataIsNull() PASSED

EFSCheckTerminalTest > testDBException() PASSED

EFSCheckTerminalTest > testPrepareForFailureCases1() PASSED

EFSCheckTerminalTest > testPrepareForFailureCases() PASSED

EFSCheckTerminalTest > testPrepareWhenTerminalNotPresent() PASSED

EFSCheckTerminalTest > testPrepareFailCase() PASSED

EFSCheckTerminalTest > testPrepareWhenTerminalIsNotActive() PASSED

EFSCheckTerminalTest > testPrepareWhenMerchantObjectIsNull() PASSED

EFSDecryptCardDataTest > testProcess() PASSED

EFSDecryptCardDataTest > testProcessForFailureCases() PASSED

EFSECHOApiTest > prepareTest() PASSED

EFSGenerateAtomTxnIDTest > test() PASSED

EFSGetDEKTest > test() PASSED

EFSGetSmartRoutingDataTest > testProcess() PASSED

EFSGetTMKUnderPKTest > test() PASSED

EFSGetTPKUnderTMKTest > test() PASSED

EFSGetTPKUnderTMKTest > test1() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted1() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted2() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted3() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted4() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted() PASSED

EFSMoneyAddTest > testPrepare_ValidOriginAndMissingField35_Aborted10() PASSED

EFSNotSupportedTest > testPrepare() PASSED

EFSOfflineTest > test() PASSED

EFSPurchaseTest > wrongDE3Check() PASSED

EFSPurchaseTest > testForECOM() PASSED

EFSPurchaseTest > test() PASSED

EFSPurchaseTest > missingDE35() PASSED

EFSPurchaseWithCashbackTest > testPrepare() PASSED

EFSPurchaseWithCashbackTest > testPrepare1() PASSED

EFSPurchaseWithCashbackTest > testPrepare2() PASSED

EFSPurchaseWithCashbackTest > testPrepare3() PASSED

EFSSendTestTransactionResponseToPOSTest > test() PASSED

EFSSendToDestinationQueueTest > test() PASSED

EFSSendToDestinationQueueTest > testCommitFailureTestCases() PASSED

EFSSendToDestinationQueueTest > sendToSchemeQueue_Test() PASSED

EFSStoreTerminalDataTest > prepare_test() PASSED

EFSStoreTerminalDataTest > prepare_test1() PASSED

EFSSwitchTest > prepare_test() PASSED

EFSSwitchTest > selectTest() PASSED

EFSTranslatePINTest > test1() PASSED

EFSTranslatePINTest > test2() PASSED

EMITest > prepare_test() PASSED

EMITest > prepare_test10() PASSED

EMITest > prepare_test11() PASSED

EMITest > prepare_test13() PASSED

EMITest > prepare_test112() PASSED

EMITest > prepare_test1() PASSED

EMITest > prepare_test2() PASSED

EMITest > prepare_test3() PASSED

EMITest > prepare_test5() PASSED

EMITest > prepare_test6() PASSED

EMITest > prepare_test7() PASSED

EMITest > prepare_test8() PASSED

EMITest > prepare_test9() PASSED

Log2DatabaseHitachiTest > testAbort() PASSED

Log2DatabaseHitachiTest > testPrepare() PASSED

Log2DatabaseHitachiTest > testAbortWithMessageProcessingStatusAs0() PASSED

Log2DatabaseHitachiTest > testAbortWithMessageToScheme() PASSED

Log2DatabaseHitachiTest > testPrepareForAbort() PASSED

Log2DatabaseHitachiTest > testCommit() PASSED

Log2DatabaseHitachiTest > testForPreAuthCompletion() PASSED

PreparePOSReversal2HitachiTest > testPrepareVoid() PASSED

PreparePOSReversal2HitachiTest > testPreparePOSVoid() PASSED

PreparePOSReversal2HitachiTest > testPreparePOSReversal() PASSED

PreparePOSReversal2HitachiTest > testPrepareVoid1() PASSED

PreparePOSReversal2HitachiTest > testPrepareVoid2() PASSED

PreparePOSReversal2HitachiTest > testPrepare() PASSED

PreparePOSReversal2HitachiTest > testPrepare1() PASSED

PreparePOSReversal2HitachiTest > testPrepare2() PASSED

PreparePOSReversal2HitachiTest > testPrepare4() PASSED

PreparePOSReversal2HitachiTest > testPrepare21() PASSED

PreparePOSReversal2HitachiTest > testPrepareTimeStamp() PASSED

PreparePOSReversal2HitachiTest > testPreparePOSVoid1() PASSED

PreparePOSReversal2HitachiTest > testPreparePOSReversal1() PASSED

PreparePreAuthCompletionRequest2HitachiTest > testPrepare() PASSED

PrepareRequest2HitachiTest > prepare1() PASSED

PrepareRequest2HitachiTest > prepare() PASSED

PrepareSwitchReversal2HitachiTest > testPrepare() PASSED

PrepareSwitchReversal2HitachiTest > testFailureCase() PASSED

QueryHitachiTest > testExpired() PASSED

QueryHitachiTest > testMuxIsNotAvailableCase() PASSED

QueryHitachiTest > testProcessWithMUXIsNotConnected() PASSED

QueryHitachiTest > testProcessForContinuationsAsTrue() PASSED

QueryHitachiTest > testResponseReceived() PASSED

QueryHitachiTest > testMessage2SchemeMissingCase() PASSED

QueryHitachiTest > testProcessWithOutDestination() PASSED

QueryHitachiTest > testProcessWithContinuesAsFalseWithISOMsgAsNotNull() PASSED

QueryHitachiTest > testProcessWithContinuesAsFalseWithISOMsgAsNull() PASSED

SendResponseFromHitachiTest > testSetConfiguration() PASSED

SendResponseFromHitachiTest > testSetTransactionManager() PASSED

SendResponseFromHitachiTest > testProcess() PASSED

SendResponseFromHitachiTest > testCommitWithFalseCase() PASSED

SendResponseFromHitachiTest > testReverse() PASSED

SendResponseFromHitachiTest > testCommit() PASSED

MACTest > test() PASSED

MerchantDataProcessTest > testProcessFailureCase() PASSED

MerchantDataProcessTest > test() PASSED

BatchClosureTest > testException() PASSED

BatchClosureTest > testSetConfiguration() PASSED

BatchClosureTest > testException1() PASSED

BatchClosureTest > testPrepare() PASSED

BatchClosureTest > testPrepare1() PASSED

BatchClosureTest > testForDE60Missing() PASSED

BatchClosureTest > testPrepareException() PASSED

EFSBuildCardTest > testException() PASSED

EFSBuildCardTest > testPrepare() PASSED

EFSDecryptCardDataTest > testProcess() PASSED

EFSDecryptCardDataTest > testProcessForFailureCases() PASSED

EFSGetSmartRoutingDataTest > testPrepareIssuerNotSupported() PASSED

EFSLog2DatabaseTest > testAbort() PASSED

EFSLog2DatabaseTest > testPrepare() PASSED

EFSLog2DatabaseTest > testPrepareForAbort() PASSED

EFSLog2DatabaseTest > testCommit() PASSED

EFSPrepareCCLTest > testProcessForFailCase() PASSED

EFSPrepareCCLTest > testProcess() PASSED

EFSPrepareLog2TitanTest > testProcess() PASSED

EFSPrepareLog2TitanTest > testPrepareTitanInsertRequest() PASSED

EFSPrepareLog2TitanTest > testCommit() PASSED

EFSSendResponse2POSTest > testAbort() PASSED

EFSSendResponse2POSTest > testPrepare() PASSED

EFSSendResponse2POSTest > testPrepareForAbort() PASSED

EFSSendResponse2POSTest > testCommit() PASSED

GenerateCardTokenTest > testException() PASSED

GenerateCardTokenTest > testeGneratePANCardToken() PASSED

HTTPCallTest > testHttpPostConnection() PASSED

PreAuthCompletionTest > testPrepare_ValidOriginAndMissingField35_Aborted4() PASSED

PreAuthCompletionTest > testPrepare_ValidOriginAndMissingField35_Aborted() PASSED

PurchaseWithTipTest > testPrepare_ValidOriginAndMissingField35_Aborted1() PASSED

PurchaseWithTipTest > testPrepare_ValidOriginAndMissingField35_Aborted2() PASSED

PurchaseWithTipTest > testPrepare_ValidOriginAndMissingField35_Aborted3() PASSED

PurchaseWithTipTest > testPrepare_ValidOriginAndMissingField35_Aborted4() PASSED

PurchaseWithTipTest > testPrepare_ValidOriginAndMissingField35_Aborted() PASSED

EFSLog2DatabaseRupayTest > testAbort() PASSED

EFSLog2DatabaseRupayTest > testPrepare() PASSED

EFSLog2DatabaseRupayTest > testPrepareForAbort() PASSED

EFSLog2DatabaseRupayTest > testCommit() PASSED

EFSPreparePOSReversal2RupayTest > testPrepareVoid() PASSED

EFSPreparePOSReversal2RupayTest > testPreparePOSVoid() PASSED

EFSPreparePOSReversal2RupayTest > testPreparePOSReversal() PASSED

EFSPreparePOSReversal2RupayTest > testPrepareVoid1() PASSED

EFSPreparePOSReversal2RupayTest > testPrepareVoid2() PASSED

EFSPreparePOSReversal2RupayTest > testPrepare() PASSED

EFSPreparePOSReversal2RupayTest > testPrepare1() PASSED

EFSPreparePOSReversal2RupayTest > testPrepare2() PASSED

EFSPreparePOSReversal2RupayTest > testPrepare4() PASSED

EFSPreparePOSReversal2RupayTest > testPrepare21() PASSED

EFSPreparePOSReversal2RupayTest > testPrepareTimeStamp() PASSED

EFSPreparePOSReversal2RupayTest > testPreparePOSVoid1() PASSED

EFSPreparePOSReversal2RupayTest > testPreparePOSReversal1() PASSED

EFSPrepareRequest2RupayTest > testPrepare() PASSED

EFSPrepareSwitchReversal2RupayTest > testPrepare() PASSED

EFSPrepareSwitchReversal2RupayTest > testFailureCase() PASSED

EFSSendResponseFromRupayTest > testProcess() PASSED

EFSSendResponseFromRupayTest > testCommitWithFalseCase() PASSED

EFSSendResponseFromRupayTest > testCommit() PASSED

Log2DatabaseMWTitanTest > testAbort() PASSED

Log2DatabaseMWTitanTest > testPrepare() PASSED

Log2DatabaseMWTitanTest > testAbortWithMessageProcessingStatusAs0() PASSED

Log2DatabaseMWTitanTest > testAbortWithMessageToScheme() PASSED

Log2DatabaseMWTitanTest > testPrepareForAbort() PASSED

Log2DatabaseMWTitanTest > testCommit() PASSED

Log2DatabaseMWTitanTest > testForPreAuthCompletion() PASSED

Log2DatabaseMWTitanTest2 > test() PASSED

PrepareTitanRequestTest > testProcess() PASSED

PrepareTitanResponseTest > testPrepare() PASSED

PrepareTitanResponseTest > testPrepare1() PASSED

Log2DatabaseWorldlineTest > testAbort() PASSED

Log2DatabaseWorldlineTest > testPrepare() PASSED

Log2DatabaseWorldlineTest > testAbortWithMessageProcessingStatusAs0() PASSED

Log2DatabaseWorldlineTest > testAbortWithMessageToScheme() PASSED

Log2DatabaseWorldlineTest > testPrepareForAbort() PASSED

Log2DatabaseWorldlineTest > testCommit() PASSED

Log2DatabaseWorldlineTest > testForPreAuthCompletion() PASSED

PreparePOSReversal2WorldlineTest > testPrepareVoid() PASSED

PreparePOSReversal2WorldlineTest > testPreparePOSVoid() PASSED

PreparePOSReversal2WorldlineTest > testPreparePOSReversal() PASSED

PreparePOSReversal2WorldlineTest > testPrepareVoid1() PASSED

PreparePOSReversal2WorldlineTest > testPrepareVoid2() PASSED

PreparePOSReversal2WorldlineTest > testPrepare() PASSED

PreparePOSReversal2WorldlineTest > testPrepare1() PASSED

PreparePOSReversal2WorldlineTest > testPrepare2() PASSED

PreparePOSReversal2WorldlineTest > testPrepare4() PASSED

PreparePOSReversal2WorldlineTest > testPrepare21() PASSED

PreparePOSReversal2WorldlineTest > testPrepareTimeStamp() PASSED

PreparePOSReversal2WorldlineTest > testPreparePOSVoid1() PASSED

PreparePOSReversal2WorldlineTest > testPreparePOSReversal1() PASSED

PreparePreAuthCompletionRequest2WorldlineTest > testPrepare() PASSED

PrepareRequest2WorldlineTest > prepare1() PASSED

PrepareRequest2WorldlineTest > prepare() PASSED

PrepareSwitchReversal2WorldlineTest > testPrepare() PASSED

PrepareSwitchReversal2WorldlineTest > testFailureCase() PASSED

QueryWorldlineTest > testExpired() PASSED

QueryWorldlineTest > testMuxIsNotAvailableCase() PASSED

QueryWorldlineTest > testProcessWithMUXIsNotConnected() PASSED

QueryWorldlineTest > testProcessForContinuationsAsTrue() PASSED

QueryWorldlineTest > testResponseReceived() PASSED

QueryWorldlineTest > testMessage2SchemeMissingCase() PASSED

QueryWorldlineTest > testProcessWithOutDestination() PASSED

QueryWorldlineTest > testProcessWithContinuesAsFalseWithISOMsgAsNotNull() PASSED

QueryWorldlineTest > testProcessWithContinuesAsFalseWithISOMsgAsNull() PASSED

SendResponseFromWorldlineTest > testSetConfiguration() PASSED

SendResponseFromWorldlineTest > testSetTransactionManager() PASSED

SendResponseFromWorldlineTest > testProcess() PASSED

SendResponseFromWorldlineTest > testCommitWithFalseCase() PASSED

SendResponseFromWorldlineTest > testReverse() PASSED

SendResponseFromWorldlineTest > testCommit() PASSED

ComplianceNoneTest > makeCompliantTest() PASSED

ComplianceWipeTest > makeCompliantTest() PASSED

TLVComplianceTest > makeCompliantTest1() PASSED

TLVComplianceTest > makeCompliantTest() PASSED

UtilsTest > concatTest() PASSED

UtilsTest > leftPadTest() PASSED

UtilsTest > substringAfterTest() PASSED

UtilsTest > substringAftertest() PASSED

UtilsTest > substringAfterTest1() PASSED

UtilsTest > substringAftertest4() PASSED

UtilsTest > substringAftertest5() PASSED

UtilsTest > leftPadTest12() PASSED

UtilsTest > leftPadTest13() PASSED

UtilsTest > leftPadTest14() PASSED

UtilsTest > leftPadTest15() PASSED

UtilsTest > leftPadTest17() PASSED

UtilsTest > midtest1() PASSED

UtilsTest > midtest2() PASSED

UtilsTest > midtest4() PASSED

UtilsTest > prettyOutTest() PASSED

UtilsTest > rightPadTest10() PASSED

UtilsTest > righttest() PASSED

UtilsTest > righttest1() PASSED

UtilsTest > righttest2() PASSED

UtilsTest > righttest3() PASSED

UtilsTest > leftPadTest1() PASSED

UtilsTest > leftPadTest2() PASSED

UtilsTest > leftPadTest3() PASSED

UtilsTest > leftPadTest4() PASSED

UtilsTest > substringBetweenTest() PASSED

UtilsTest > substringBetweentest() PASSED

UtilsTest > hexDumpTest() PASSED

UtilsTest > rightPadTest1() PASSED

UtilsTest > rightPadTest2() PASSED

UtilsTest > rightPadTest3() PASSED

UtilsTest > rightPadTest4() PASSED

UtilsTest > rightPadTest5() PASSED

UtilsTest > rightPadTest6() PASSED

UtilsTest > rightPadTest7() PASSED

UtilsTest > rightPadTest8() PASSED

UtilsTest > rightPadTest9() PASSED

UtilsTest > hexStringToByteArrayTest() PASSED

UtilsTest > removeEndTest() PASSED

UtilsTest > substringAfterLasttest1() PASSED

UtilsTest > substringAfterLasttest2() PASSED

UtilsTest > substringAfterLasttest4() PASSED

UtilsTest > printISOMsgTest() PASSED

UtilsTest > leftPad() PASSED

UtilsTest > removeEndTest1() PASSED

UtilsTest > substringBeforetest1() PASSED

UtilsTest > substringBeforetest2() PASSED

UtilsTest > substringBeforetest3() PASSED

UtilsTest > substringBeforeLasttest1() PASSED

UtilsTest > substringBeforeLasttest3() PASSED

UtilsTest > midtest() PASSED

UtilsTest > repeattest() PASSED

UtilsTest > rightPadtest() PASSED

UtilsTest > isEmptyNullTest1() PASSED

UtilsTest > isEmptyNullTest2() PASSED

UtilsTest > isEmptyNullTest3() PASSED

UtilsTest > substringBeforetest() PASSED

UtilsTest > isEmptyNullTest() PASSED

UtilsTest > substringBetweenTest1() PASSED

UtilsTest > repeattest1() PASSED

UtilsTest > repeattest2() PASSED

UtilsTest > repeattest3() PASSED

UtilsTest > repeattest4() PASSED

UtilsTest > repeattest5() PASSED

UtilsTest > repeattest6() PASSED

UtilsTest > repeattest7() PASSED

UtilsTest > repeattest8() PASSED

UtilsTest > repeattest9() PASSED

UtilsTest > lefttest() PASSED

UtilsTest > lefttest1() PASSED

UtilsTest > lefttest2() PASSED

UtilsTest > lefttest3() PASSED

UtilsTest > printISOMsgForELKTest() PASSED

UtilsTest > substringAfterLasttest() PASSED

UtilsTest > substringBeforeLasttest() PASSED

> Task :jacocoTestReport
[ant:jacocoReport] Classes in bundle 'middleware' do not match with execution data. For report generation the same class files must be used as at runtim
e.
[ant:jacocoReport] Execution data for class in/atomtech/mw/Constants does not match.

Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/6.4/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 42s
8 actionable tasks: 8 executed






